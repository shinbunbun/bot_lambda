"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = require("./http");
const exceptions_1 = require("./exceptions");
function toArray(maybeArr) {
    return Array.isArray(maybeArr) ? maybeArr : [maybeArr];
}
function ensureJSON(raw) {
    if (typeof raw === "object") {
        return raw;
    }
    else {
        throw new exceptions_1.JSONParseError("Failed to parse response body as JSON", raw);
    }
}
class Client {
    constructor(config) {
        if (!config.channelAccessToken) {
            throw new Error("no channel access token");
        }
        this.config = config;
        this.http = new http_1.default(process.env.API_BASE_URL || "https://api.line.me/v2/bot/", {
            Authorization: "Bearer " + this.config.channelAccessToken,
        });
    }
    async pushMessage(to, messages) {
        return this.http.post("/message/push", {
            messages: toArray(messages),
            to,
        });
    }
    async replyMessage(replyToken, messages) {
        return this.http.post("/message/reply", {
            messages: toArray(messages),
            replyToken,
        });
    }
    async multicast(to, messages) {
        return this.http.post("/message/multicast", {
            messages: toArray(messages),
            to,
        });
    }
    async getProfile(userId) {
        const profile = await this.http.get(`/profile/${userId}`);
        return ensureJSON(profile);
    }
    async getChatMemberProfile(chatType, chatId, userId) {
        const profile = await this.http.get(`/${chatType}/${chatId}/member/${userId}`);
        return ensureJSON(profile);
    }
    async getGroupMemberProfile(groupId, userId) {
        return this.getChatMemberProfile("group", groupId, userId);
    }
    async getRoomMemberProfile(roomId, userId) {
        return this.getChatMemberProfile("room", roomId, userId);
    }
    async getChatMemberIds(chatType, chatId) {
        let memberIds = [];
        let start;
        do {
            const res = await this.http.get(`/${chatType}/${chatId}/members/ids`, start ? { start } : null);
            ensureJSON(res);
            memberIds = memberIds.concat(res.memberIds);
            start = res.next;
        } while (start);
        return memberIds;
    }
    async getGroupMemberIds(groupId) {
        return this.getChatMemberIds("group", groupId);
    }
    async getRoomMemberIds(roomId) {
        return this.getChatMemberIds("room", roomId);
    }
    async getMessageContent(messageId) {
        return this.http.getStream(`/message/${messageId}/content`);
    }
    leaveChat(chatType, chatId) {
        return this.http.post(`/${chatType}/${chatId}/leave`);
    }
    async leaveGroup(groupId) {
        return this.leaveChat("group", groupId);
    }
    async leaveRoom(roomId) {
        return this.leaveChat("room", roomId);
    }
    async getRichMenu(richMenuId) {
        const res = await this.http.get(`/richmenu/${richMenuId}`);
        return ensureJSON(res);
    }
    async createRichMenu(richMenu) {
        const res = await this.http.post("/richmenu", richMenu);
        return ensureJSON(res).richMenuId;
    }
    async deleteRichMenu(richMenuId) {
        return this.http.delete(`/richmenu/${richMenuId}`);
    }
    async getRichMenuIdOfUser(userId) {
        const res = await this.http.get(`/user/${userId}/richmenu`);
        return ensureJSON(res).richMenuId;
    }
    async linkRichMenuToUser(userId, richMenuId) {
        return this.http.post(`/user/${userId}/richmenu/${richMenuId}`);
    }
    async unlinkRichMenuFromUser(userId) {
        return this.http.delete(`/user/${userId}/richmenu`);
    }
    async linkRichMenuToMultipleUsers(richMenuId, userIds) {
        return this.http.post("/richmenu/bulk/link", {
            richMenuId,
            userIds,
        });
    }
    async unlinkRichMenusFromMultipleUsers(userIds) {
        return this.http.post("/richmenu/bulk/unlink", {
            userIds,
        });
    }
    async getRichMenuImage(richMenuId) {
        return this.http.getStream(`/richmenu/${richMenuId}/content`);
    }
    async setRichMenuImage(richMenuId, data, contentType) {
        return this.http.postBinary(`/richmenu/${richMenuId}/content`, data, contentType);
    }
    async getRichMenuList() {
        const res = await this.http.get(`/richmenu/list`);
        return ensureJSON(res).richmenus;
    }
    async setDefaultRichMenu(richMenuId) {
        return this.http.post(`/user/all/richmenu/${richMenuId}`);
    }
    async getDefaultRichMenuId() {
        const res = await this.http.get("/user/all/richmenu");
        return ensureJSON(res).richMenuId;
    }
    async deleteDefaultRichMenu() {
        return this.http.delete("/user/all/richmenu");
    }
    async getLinkToken(userId) {
        const res = await this.http.post(`/user/${userId}/linkToken`);
        return ensureJSON(res).linkToken;
    }
    async getNumberOfSentReplyMessages(date) {
        const res = await this.http.get(`/message/delivery/reply?date=${date}`);
        return ensureJSON(res);
    }
    async getNumberOfSentPushMessages(date) {
        const res = await this.http.get(`/message/delivery/push?date=${date}`);
        return ensureJSON(res);
    }
    async getNumberOfSentMulticastMessages(date) {
        const res = await this.http.get(`/message/delivery/multicast?date=${date}`);
        return ensureJSON(res);
    }
}
exports.default = Client;
